import tensorflow as tf
from keras.models import Model, Sequential
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Flatten, Dense, Dropout, BatchNormalization

def loadModel(Addr):

 #Red de emotion.py de deepface
	num_classes = 27
	input_shape= (28,28,1)
	model = Sequential()
	model.add(Conv2D(32, kernel_size=(3, 3),
					activation='relu',
					input_shape=input_shape))
	model.add(BatchNormalization(axis=-1))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Conv2D(64, (3, 3), activation='relu'))
	model.add(BatchNormalization(axis=-1))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Dropout(0.5))
	model.add(Flatten())
	# model.add(Dense(128, activation='relu'))
	model.add(Dense(1568, activation='relu'))
	model.add(BatchNormalization(axis=-1))
	model.add(Dropout(0.5))
	model.add(Dense(1000, activation='relu'))
	model.add(BatchNormalization(axis=-1))
	model.add(Dropout(0.5))
	model.add(Dense(700, activation='relu'))
	model.add(BatchNormalization(axis=-1))
	model.add(Dropout(0.5))
	model.add(Dense(300, activation='relu'))
	model.add(BatchNormalization(axis=-1))
	model.add(Dropout(0.5))
	model.add(Dense(100, activation='relu'))
	model.add(BatchNormalization(axis=-1))
	model.add(Dense(num_classes, activation='softmax'))

	#Se cargan los pesos del modelo entrenado obtenido 
	model.load_weights(Addr)

	return model


def ConvertModel(model):
    Converter= tf.lite.TFLiteConverter.from_keras_model(model)
    tflite_model = Converter.convert()
    return tflite_model


model= loadModel('emnist_v5.h5')
tflite_model= ConvertModel(model)
open('converted_model.tflite', 'wb').write(tflite_model)
  